{% extends 'base.html.twig' %}

{% block title %}{{ room.name }} - {{ parent() }}{% endblock %}

{% block stylesheets %}
    {{ parent() }}
    <style>
        #roomOptionsTrigger .dropdown-menu {
            display: none;
            position: absolute;
            min-width: 200px;
            background-color: #fff;
            border: 1px solid rgba(0,0,0,.15);
            border-radius: 0.25rem;
            box-shadow: 0 0.5rem 1rem rgba(0,0,0,.175);
            z-index: 1000;
        }
        
        #roomOptionsTrigger .dropdown-menu.show {
            display: block;
        }
        
        #roomOptionsTrigger .dropdown-item {
            padding: 0.5rem 1rem;
            clear: both;
            font-weight: 400;
            color: #212529;
            text-align: inherit;
            white-space: nowrap;
            background-color: transparent;
            border: 0;
        }
        
        #roomOptionsTrigger .dropdown-item:hover,
        #roomOptionsTrigger .dropdown-item:focus {
            color: #16181b;
            text-decoration: none;
            background-color: #f8f9fa;
        }
        
        #roomOptionsTrigger .dropdown-divider {
            height: 0;
            margin: 0.5rem 0;
            overflow: hidden;
            border-top: 1px solid #e9ecef;
        }
    </style>
{% endblock %}

{% block body %}
{# Add Turbo cache control to prevent reusing the page from the cache #}
<div data-turbo-permanent id="video-chat-room" data-turbo-cache="false">

<div id="roomOptionsTrigger" class="position-fixed top-0 end-0 mt-5 me-3">
    <button class="btn btn-primary rounded-circle" onclick="showRoomOptions(event)">
        <i class="fa fa-cog"></i>
    </button>
    
    <div id="roomOptionsMenu" class="dropdown-menu">
        <a class="dropdown-item" href="{{ path('app_room_invite', {slug: room.slug}) }}">Invite Users</a>
        <a class="dropdown-item" href="{{ path('app_room_participants', {slug: room.slug}) }}">Manage Participants</a>
        <a class="dropdown-item" href="#" onclick="copyRoomLink(event)">Copy Room Link</a>
        <a class="dropdown-item" href="#" onclick="toggleCamera(event)">Disable Video</a>
        <a class="dropdown-item" href="#" onclick="toggleMicrophone(event)">Mute Audio</a>
        <a class="dropdown-item" href="#" onclick="shareScreen(event)">Share Screen</a>
        <div class="dropdown-divider"></div>
        <a class="dropdown-item text-danger" href="#" onclick="leaveRoom(event)">Leave Room</a>
    </div>
</div>
<div class="row mb-3">
    <div class="col-md-8">
        <h1>{{ room.name }}</h1>
        <p>
            {% if room.isPrivate %}
                <span class="badge bg-warning text-dark">Private Room</span>
            {% else %}
                <span class="badge bg-success">Public Room</span>
            {% endif %}
            <span class="badge bg-info text-dark">
                <span id="participant-count">{{ room.participants|length }}</span> participants
            </span>
        </p>
    </div>
    <div class="col-md-4 text-end">
        <div class="dropdown">
            <button class="btn btn-outline-primary dropdown-toggle" type="button" id="dropdownMenuButton" data-bs-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                Room Options
            </button>
            <ul class="dropdown-menu dropdown-menu-end" aria-labelledby="dropdownMenuButton">
                <li><a class="dropdown-item" href="{{ path('app_room_invite', {slug: room.slug}) }}">Invite Users</a></li>
                <li><a class="dropdown-item" href="{{ path('app_room_participants', {slug: room.slug}) }}">Manage Participants</a></li>
                <li><a class="dropdown-item" href="#" id="copy-link">Copy Room Link</a></li>
                <li><a class="dropdown-item" href="#" id="toggle-video-menu">Disable Video</a></li>
                <li><a class="dropdown-item" href="#" id="toggle-audio-menu">Mute Audio</a></li>
                <li><a class="dropdown-item" href="#" id="share-screen-menu">Share Screen</a></li>
                <li><hr class="dropdown-divider"></li>
                <li><a class="dropdown-item text-danger" href="#" id="leave-room">Leave Room</a></li>
            </ul>
        </div>
    </div>
</div>

<div class="row">
    <div class="col-md-9">
        <div class="card mb-4">
            <div class="card-body p-0">
                <div id="video-container" class="position-relative" style="min-height: 400px; background-color: #111;">
                    <div id="local-video-container" class="position-absolute bottom-0 end-0 p-2 z-index-1" style="width: 200px; height: 150px; z-index: 100;">
                        <video id="local-video" autoplay muted playsinline class="w-100 h-100 rounded bg-dark" style="border: 2px solid white;"></video>
                        <div class="position-absolute bottom-0 start-0 bg-dark bg-opacity-50 text-white px-2 py-1 rounded" style="font-size: 0.8rem;">
                            You ({{ app.user ? app.user.username : 'Guest' }})
                        </div>
                        <button id="camera-retry" onclick="initializeCamera()" class="btn btn-sm btn-danger position-absolute top-0 end-0 m-1" title="Kamera se neinicializovala. Klikněte pro opětovný pokus." style="display: none;">
                            <i class="fa fa-video-slash"></i> Zapnout kameru
                        </button>
                    </div>
                    <div id="remote-videos" class="d-flex flex-wrap justify-content-center align-items-center" style="min-height: 400px;">
                        <div class="text-center text-light py-5">
                            <div class="spinner-border" role="status">
                                <span class="visually-hidden">Loading...</span>
                            </div>
                            <p class="mt-2">Connecting to room...</p>
                        </div>
                    </div>
                </div>
            </div>
            <div class="card-footer bg-dark text-center">
                <div class="btn-group">
                    <button id="mic-toggle" class="btn btn-outline-light">
                        <i class="fa fa-microphone"></i>
                    </button>
                    <button id="camera-toggle" class="btn btn-outline-light">
                        <i class="fa fa-video"></i>
                    </button>
                    <button id="screen-share" class="btn btn-outline-light">
                        <i class="fa fa-desktop"></i>
                    </button>
                </div>
            </div>
        </div>
    </div>
    
    <div class="col-md-3">
        <div class="card mb-4">
            <div class="card-header">
                <h5 class="mb-0">Participants</h5>
            </div>
            <div class="card-body p-0">
                <ul class="list-group list-group-flush" id="participants-list">
                    <li class="list-group-item d-flex justify-content-between align-items-center">
                        {{ room.owner.username }} (You)
                        <span class="badge bg-primary rounded-pill">Host</span>
                    </li>
                    {% for participant in room.participants %}
                        {% if participant.id != room.owner.id %}
                            <li class="list-group-item">
                                {{ participant.username }}
                            </li>
                        {% endif %}
                    {% endfor %}
                </ul>
            </div>
        </div>
    </div>
</div>

{% block javascripts %}
{{ parent() }}
<script>
    // Using a unique namespace to avoid conflicts with Turbo
    window.videoChatApp = window.videoChatApp || {};
    
    // Store room information in our namespace
    videoChatApp.roomId = {{ room.id }};
    videoChatApp.roomSlug = "{{ room.slug }}";
    videoChatApp.currentUserId = {{ app.user ? app.user.id : 'null' }};
    videoChatApp.currentUsername = "{{ app.user ? app.user.username : 'Guest' }}";
    videoChatApp.isOwner = {{ app.user and app.user.id == room.owner.id ? 'true' : 'false' }};
    
    // Initialize variables
    let localStream = null;
    let peers = {};
    let peer = null;
    let videoEnabled = true;
    let audioEnabled = true;
    
    // We'll use direct WebSocket connection instead of Mercure
    // because it's simpler to set up in a development environment
    
    let ws = null;
    
    // Function to connect to signaling server
    function connectToSignalingServer() {
        // Try WebSocket server first
        try {
            ws = new WebSocket('ws://localhost:3000');
            
            ws.onopen = function() {
                console.log('Connected to signaling server');
                
                // Join the room
                ws.send(JSON.stringify({
                    type: 'join',
                    userId: videoChatApp.currentUserId,
                    roomId: videoChatApp.roomId
                }));
                
                // Announce presence to everyone
                announcePresence();
            };
            
            ws.onmessage = function(event) {
                const data = JSON.parse(event.data);
                console.log('Received message:', data);
                
                switch(data.type) {
                    case 'user_joined':
                        console.log(`User ${data.userId} joined the room`);
                        // Call the new user
                        if (peer && localStream) {
                            callParticipant(data.userId);
                        }
                        break;
                        
                    case 'user_left':
                        console.log(`User ${data.userId} left the room`);
                        // Close any connections to this user
                        Object.entries(peers).forEach(([peerId, call]) => {
                            if (peerId.startsWith(data.userId + '_')) {
                                call.close();
                                delete peers[peerId];
                                removeVideoStream(peerId);
                            }
                        });
                        break;
                        
                    case 'signal':
                        // Handle incoming signal for WebRTC
                        if (data.signal && data.from && peer) {
                            // We handle this via PeerJS
                            console.log('Received signal from', data.from);
                        }
                        break;
                        
                    case 'room_users':
                        // Call all existing users in the room
                        if (data.users && data.users.length > 0) {
                            console.log('Existing users in room:', data.users);
                            data.users.forEach(userId => {
                                if (peer && localStream) {
                                    callParticipant(userId);
                                }
                            });
                        }
                        break;
                }
            };
            
            ws.onerror = function(error) {
                console.error('WebSocket error:', error);
                
                // Show error message
                remoteVideos.innerHTML = `
                    <div class="alert alert-danger my-3 p-3 text-center">
                        <h4 class="alert-heading"><i class="fas fa-exclamation-triangle"></i> Connection Error</h4>
                        <p>Could not connect to the signaling server. Video chat will not work.</p>
                        <hr>
                        <p class="mb-0">Please make sure the signaling server is running:</p>
                        <pre class="text-start bg-dark text-light p-2 mt-2">bin/run-signaling.sh</pre>
                        <button class="btn btn-primary mt-3" onclick="window.location.reload()">Reload Page</button>
                    </div>
                `;
            };
            
            ws.onclose = function() {
                console.log('Disconnected from signaling server');
                
                // Show warning if closed unexpectedly
                if (peers && Object.keys(peers).length > 0) {
                    alert('Connection to signaling server lost. Reloading page...');
                    window.location.reload();
                }
            };
        } catch(e) {
            console.error('Error connecting to signaling server:', e);
            
            // Show error message
            remoteVideos.innerHTML = `
                <div class="alert alert-danger my-3 p-3 text-center">
                    <h4 class="alert-heading"><i class="fas fa-exclamation-triangle"></i> Connection Error</h4>
                    <p>Could not connect to the signaling server. Video chat will not work.</p>
                    <hr>
                    <p class="mb-0">Please make sure the signaling server is running:</p>
                    <pre class="text-start bg-dark text-light p-2 mt-2">bin/run-signaling.sh</pre>
                    <button class="btn btn-primary mt-3" onclick="window.location.reload()">Reload Page</button>
                </div>
            `;
        }
    }
    
    // Connect to signaling server
    connectToSignalingServer();
    
    // DOM elements
    const localVideo = document.getElementById('local-video');
    const remoteVideos = document.getElementById('remote-videos');
    const participantsList = document.getElementById('participants-list');
    const participantCount = document.getElementById('participant-count');
    const micToggle = document.getElementById('mic-toggle');
    const cameraToggle = document.getElementById('camera-toggle');
    const screenShare = document.getElementById('screen-share');
    
    // Check browser support for WebRTC
    function checkWebRTCSupport() {
        if (!navigator.mediaDevices || !navigator.mediaDevices.getUserMedia) {
            alert('Your browser does not support WebRTC. Please use a modern browser like Chrome, Firefox, Safari, or Edge.');
            return false;
        }
        return true;
    }
    
    // Request permission and access media devices with proper error handling
    async function setupMediaDevices() {
        const constraints = {
            audio: true,
            video: true
        };
        
        try {
            // Explicitly trigger camera permission prompt
            // This makes Chrome show the permission dialog immediately
            console.log("Attempting to access camera and microphone...");
            await navigator.mediaDevices.getUserMedia({ video: true, audio: true });
            
            // First check if we have permission to access devices
            const devices = await navigator.mediaDevices.enumerateDevices();
            const hasCamera = devices.some(device => device.kind === 'videoinput');
            const hasMicrophone = devices.some(device => device.kind === 'audioinput');
            
            if (!hasCamera || !hasMicrophone) {
                console.warn('Camera or microphone not detected:', { hasCamera, hasMicrophone });
            }
            
            // Now request the stream with specified constraints
            const stream = await navigator.mediaDevices.getUserMedia(constraints);
            console.log('Media stream obtained successfully');
            return stream;
            
        } catch (err) {
            console.error('Error accessing media devices:', err);
            
            // Provide more helpful error messages based on the error type
            if (err.name === 'NotFoundError' || err.name === 'DevicesNotFoundError') {
                alert('No camera or microphone found. Please connect a device and try again.');
            } else if (err.name === 'NotAllowedError' || err.name === 'PermissionDeniedError') {
                alert('Permission to access camera and microphone was denied. Please allow access in your browser settings and reload the page.');
            } else if (err.name === 'NotReadableError' || err.name === 'TrackStartError') {
                alert('Your camera or microphone is already in use by another application. Please close other video applications and reload the page.');
            } else if (err.name === 'OverconstrainedError' || err.name === 'ConstraintNotSatisfiedError') {
                alert('Your camera does not meet the required constraints. Please try with a different camera.');
            } else {
                alert('Error accessing your camera or microphone: ' + err.message + '. Please check your device settings and reload the page.');
            }
            
            return null;
        }
    }

    // Initialize dropdown menu
    $(document).ready(function() {
        console.log('Document ready event fired');
        
        try {
            // Make sure Bootstrap is available
            if (typeof bootstrap === 'undefined') {
                console.error('Bootstrap is not defined. Make sure Bootstrap JS is properly loaded.');
                return;
            }
            
            // Initialize using vanilla JS first for reliability
            const dropdownButtons = document.querySelectorAll('.dropdown-toggle');
            console.log('Found dropdown buttons:', dropdownButtons.length);
            
            dropdownButtons.forEach(button => {
                try {
                    new bootstrap.Dropdown(button);
                    console.log('Initialized dropdown on:', button.id || 'unnamed button');
                } catch (e) {
                    console.error('Error initializing dropdown:', e);
                }
            });
            
            // Add direct click handler to the main dropdown button
            const mainDropdownButton = document.getElementById('dropdownMenuButton');
            if (mainDropdownButton) {
                console.log('Adding click handler to main dropdown button');
                mainDropdownButton.addEventListener('click', function(e) {
                    console.log('Main dropdown button clicked (vanilla JS)');
                    e.stopPropagation();
                    try {
                        const dropdown = bootstrap.Dropdown.getInstance(this);
                        if (dropdown) {
                            dropdown.toggle();
                        } else {
                            new bootstrap.Dropdown(this).toggle();
                        }
                    } catch (err) {
                        console.error('Error handling dropdown click:', err);
                    }
                });
            } else {
                console.warn('Main dropdown button not found');
            }
            
            // Trying jQuery as a fallback
            if ($ && typeof $.fn.dropdown === 'function') {
                console.log('Using jQuery dropdown initialization as backup');
                $('.dropdown-toggle').dropdown();
                
                $('#dropdownMenuButton').on('click', function() {
                    console.log('Dropdown button clicked (jQuery)');
                });
            }
        } catch (err) {
            console.error('Error during dropdown initialization:', err);
        }
    });
    
    // Initialize WebRTC when page loads
    document.addEventListener('DOMContentLoaded', function() {
        console.log('DOMContentLoaded fired, initializing camera');
        initializeCamera();
    });
    
    // Also reinitialize on page visibility change (for when coming back to the tab)
    document.addEventListener('visibilitychange', function() {
        if (document.visibilityState === 'visible') {
            if (!localStream) {
                console.log('Page became visible and no localStream exists, initializing camera');
                initializeCamera();
            } else {
                // Zkontrolovat, zda je kamera aktivní - pokud není, zobrazit tlačítko pro restartování
                const videoTracks = localStream.getVideoTracks();
                if (videoTracks.length === 0 || !videoTracks[0].enabled) {
                    const retryButton = document.getElementById('camera-retry');
                    if (retryButton) {
                        retryButton.style.display = 'block';
                    }
                }
            }
        }
    });
    
    // Kontrola stavu kamery každých 5 sekund
    setInterval(function() {
        // Pokud nemáme stream nebo nefunguje, zobrazit tlačítko
        if (!localStream || (localStream.getVideoTracks().length === 0)) {
            const retryButton = document.getElementById('camera-retry');
            if (retryButton) {
                retryButton.style.display = 'block';
            }
        }
    }, 5000);
    
    // Separate camera initialization into its own function for reusability
    async function initializeCamera() { // Async function pro práci s kamerou
        // First check browser support
        if (!checkWebRTCSupport()) {
            return;
        }
        
        // Get DOM elements before using them
        const localVideo = document.getElementById('local-video');
        const remoteVideos = document.getElementById('remote-videos');
        console.log("Local video element:", localVideo);
        
        // Create a loading indicator
        const loadingDiv = document.createElement('div');
        loadingDiv.className = 'text-center text-light py-5';
        loadingDiv.innerHTML = `
            <div class="spinner-border" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
            <p class="mt-2">Setting up video connection...</p>
        `;
        
        if (remoteVideos) {
            remoteVideos.innerHTML = '';
            remoteVideos.appendChild(loadingDiv);
        }
        
        try {
            console.log('Attempting to set up media devices...');
            // Get media stream with proper error handling
            const stream = await setupMediaDevices();
            
            if (!stream) {
                console.error('Failed to get media stream');
                if (remoteVideos) {
                    remoteVideos.innerHTML = `
                        <div class="text-center text-light py-5">
                            <div class="alert alert-danger">
                                <p><i class="fa fa-exclamation-triangle"></i> Could not access camera or microphone</p>
                                <button class="btn btn-primary mt-3" onclick="window.location.reload()">Try Again</button>
                            </div>
                        </div>
                    `;
                }
                return;
            }
            
            // Store the stream globally
            localStream = stream;
            console.log('Media stream obtained successfully:', stream.getTracks().length, 'tracks');
            
            // Hide the retry button if it's visible
            const retryButton = document.getElementById('camera-retry');
            if (retryButton) {
                retryButton.style.display = 'none';
            }
        } catch (err) {
            console.error('Error during camera initialization:', err);
            
            // Show the retry button
            const retryButton = document.getElementById('camera-retry');
            if (retryButton) {
                retryButton.style.display = 'block';
            }
            
            alert('Chyba při inicializaci kamery: ' + err.message + '. Použijte tlačítko "Zapnout kameru" nebo obnovte stránku.');
            return;
        }
        
        try {
            // Display local video
            console.log("Setting local stream to video element");
            if (localVideo) {
                localVideo.srcObject = localStream;
                
                // Agresivnější přístup k zobrazení videa
                let playPromise = localVideo.play();
                if (playPromise !== undefined) {
                    playPromise
                        .then(() => {
                            console.log("Local video playing successfully");
                        })
                        .catch(e => {
                            console.error("Error playing local video:", e);
                            // Zkusit znovu přehrát s delším zpožděním
                            setTimeout(() => {
                                console.log("Trying to play video again after delay");
                                localVideo.play()
                                    .catch(e2 => console.error("Second attempt failed:", e2));
                            }, 1000);
                        });
                }
                
                // Přidat listener na loadedmetadata událost pro zajištění, že video je připraveno
                localVideo.addEventListener('loadedmetadata', function() {
                    console.log("Video metadata loaded, dimensions:", localVideo.videoWidth, "x", localVideo.videoHeight);
                });
                
                // Zajistit viditelnost videa
                localVideo.style.display = 'block';
            } else {
                console.error("Local video element not found!");
            }
            
            // Initialize PeerJS
            console.log("Initializing PeerJS");
            peer = new Peer(videoChatApp.currentUserId + '_' + Date.now(), {
                debug: 2,
                config: {
                    'iceServers': [
                        { urls: 'stun:stun.l.google.com:19302' },
                        { urls: 'stun:stun1.l.google.com:19302' }
                    ]
                }
            });
            
            // Handle peer connection open
            peer.on('open', function(id) {
                console.log('My peer ID is: ' + id);
                announcePresence();
            });
            
            // Handle incoming calls
            peer.on('call', function(call) {
                console.log('Incoming call from:', call.peer);
                
                // Answer the call with our stream
                call.answer(localStream);
                
                // Handle stream from the remote peer
                call.on('stream', function(remoteStream) {
                    console.log('Received remote stream from:', call.peer);
                    // Check if we already have this peer
                    if (!peers[call.peer]) {
                        addVideoStream(call.peer, remoteStream);
                        peers[call.peer] = call;
                    }
                });
                
                // Handle call close
                call.on('close', function() {
                    console.log('Call closed with:', call.peer);
                    removeVideoStream(call.peer);
                    delete peers[call.peer];
                });
                
                // Handle call errors
                call.on('error', function(err) {
                    console.error('Call error with peer:', call.peer, err);
                    removeVideoStream(call.peer);
                    delete peers[call.peer];
                });
            });
            
            // Handle connection errors
            peer.on('error', function(err) {
                console.error('PeerJS error:', err);
                
                if (err.type === 'network' || err.type === 'server-error') {
                    alert('Chyba sítě: Nelze se připojit k signalizačnímu serveru. Zkontrolujte vaše připojení k internetu a zkuste to znovu.');
                } else if (err.type === 'peer-unavailable') {
                    console.log('Peer is unavailable, they may have left the room');
                } else {
                    alert('Chyba připojení: ' + err);
                }
            });
            
            // Handle disconnection
            peer.on('disconnected', function() {
                console.log('Disconnected from signaling server, attempting to reconnect...');
                peer.reconnect();
            });
            
            // Setup UI controls
            setupControls();
            
            // Clear loading state
            if (remoteVideos) {
                remoteVideos.innerHTML = '';
            }
            
        } catch (error) {
            console.error('Error setting up WebRTC:', error);
            alert('Chyba při nastavování video chatu: ' + error.message);
        }
    }
    
    // Announce presence to other participants
    function announcePresence() {
        try {
            // If WebSocket is connected, we don't need to use the API
            if (ws && ws.readyState === WebSocket.OPEN) {
                console.log('Announcing presence via WebSocket');
                return;
            }
            
            // Fallback to REST API
            fetch('/api/rooms/' + videoChatApp.roomId + '/announce', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                }
            })
            .then(response => response.json())
            .then(data => console.log('Announced presence via API:', data))
            .catch(error => console.error('Error announcing presence:', error));
        } catch (error) {
            console.error('Error in announcePresence:', error);
        }
    }
    
    // Call a new participant
    function callParticipant(userId) {
        // Generate a unique peer ID for the participant
        const peerId = userId + '_' + Date.now();
        
        // Make the call
        const call = peer.call(peerId, localStream);
        
        // Set up event handlers
        call.on('stream', function(remoteStream) {
            if (!peers[call.peer]) {
                addVideoStream(call.peer, remoteStream);
                peers[call.peer] = call;
            }
        });
        
        call.on('close', function() {
            removeVideoStream(call.peer);
            delete peers[call.peer];
        });
        
        return call;
    }
    
    // Add a video stream to the UI
    function addVideoStream(peerId, stream) {
        // Create video container
        const videoContainer = document.createElement('div');
        videoContainer.className = 'remote-video-wrapper p-2';
        videoContainer.style.width = '50%';
        videoContainer.style.height = '300px';
        videoContainer.id = 'container-' + peerId;
        
        // Create video element
        const video = document.createElement('video');
        video.srcObject = stream;
        video.autoplay = true;
        video.playsInline = true;
        video.className = 'w-100 h-100 rounded bg-dark';
        video.id = 'video-' + peerId;
        
        // Create username label
        const usernameLabel = document.createElement('div');
        usernameLabel.className = 'position-absolute bottom-0 start-0 p-2 text-light bg-dark bg-opacity-50 rounded';
        usernameLabel.textContent = 'Participant';
        
        // Add elements to container
        videoContainer.appendChild(video);
        videoContainer.appendChild(usernameLabel);
        remoteVideos.appendChild(videoContainer);
        
        // Update participant count
        updateParticipantCount();
    }
    
    // Remove a video stream from the UI
    function removeVideoStream(peerId) {
        const videoContainer = document.getElementById('container-' + peerId);
        if (videoContainer) {
            videoContainer.remove();
        }
        
        // Update participant count
        updateParticipantCount();
    }
    
    // Update the participant count display
    function updateParticipantCount() {
        const count = Object.keys(peers).length + 1; // +1 for local user
        participantCount.textContent = count;
    }
    
    // Set up UI controls
    function setupControls() {
        // Get fresh references to UI elements
        const localVideo = document.getElementById('local-video');
        const remoteVideos = document.getElementById('remote-videos');
        const participantsList = document.getElementById('participants-list');
        const participantCount = document.getElementById('participant-count');
        const micToggle = document.getElementById('mic-toggle');
        const cameraToggle = document.getElementById('camera-toggle');
        const screenShare = document.getElementById('screen-share');
        
        console.log('Setting up controls with elements:', {
            localVideo: !!localVideo,
            remoteVideos: !!remoteVideos,
            participantsList: !!participantsList,
            participantCount: !!participantCount,
            micToggle: !!micToggle,
            cameraToggle: !!cameraToggle,
            screenShare: !!screenShare
        });
        // Mic toggle function
        function toggleMicrophone() {
            audioEnabled = !audioEnabled;
            localStream.getAudioTracks().forEach(track => {
                track.enabled = audioEnabled;
            });
            
            // Update UI in both places
            micToggle.innerHTML = audioEnabled ? 
                '<i class="fa fa-microphone"></i>' : 
                '<i class="fa fa-microphone-slash"></i>';
            micToggle.classList.toggle('btn-danger', !audioEnabled);
            micToggle.classList.toggle('btn-outline-light', audioEnabled);
            
            // Update dropdown menu text
            const audioMenuItem = document.getElementById('toggle-audio-menu');
            audioMenuItem.textContent = audioEnabled ? 'Mute Audio' : 'Unmute Audio';
        }
        
        // Camera toggle function
        function toggleCamera() {
            videoEnabled = !videoEnabled;
            localStream.getVideoTracks().forEach(track => {
                track.enabled = videoEnabled;
            });
            
            // Update UI in both places
            cameraToggle.innerHTML = videoEnabled ? 
                '<i class="fa fa-video"></i>' : 
                '<i class="fa fa-video-slash"></i>';
            cameraToggle.classList.toggle('btn-danger', !videoEnabled);
            cameraToggle.classList.toggle('btn-outline-light', videoEnabled);
            
            // Update dropdown menu text
            const videoMenuItem = document.getElementById('toggle-video-menu');
            videoMenuItem.textContent = videoEnabled ? 'Disable Video' : 'Enable Video';
        }
        
        // Screen share function
        async function shareScreen() {
            try {
                const screenStream = await navigator.mediaDevices.getDisplayMedia({
                    video: true
                });
                
                // Replace video track with screen track
                const videoTrack = screenStream.getVideoTracks()[0];
                
                // Get all senders from peer connections and replace the track
                Object.values(peers).forEach(call => {
                    const sender = call.peerConnection.getSenders().find(s => 
                        s.track && s.track.kind === 'video'
                    );
                    if (sender) {
                        sender.replaceTrack(videoTrack);
                    }
                });
                
                // Replace local video display
                const oldStream = localVideo.srcObject;
                const oldAudioTrack = oldStream.getAudioTracks()[0];
                screenStream.addTrack(oldAudioTrack);
                localVideo.srcObject = screenStream;
                
                // Update UI
                screenShare.classList.remove('btn-outline-light');
                screenShare.classList.add('btn-success');
                screenShare.innerHTML = '<i class="fa fa-desktop"></i> <span class="badge bg-light text-dark">Sharing</span>';
                
                // Update menu
                const screenMenuItem = document.getElementById('share-screen-menu');
                screenMenuItem.textContent = 'Stop Screen Sharing';
                
                // Handle when user stops sharing screen
                videoTrack.onended = function() {
                    // Restore camera as video source
                    localStream.getVideoTracks().forEach(track => {
                        Object.values(peers).forEach(call => {
                            const sender = call.peerConnection.getSenders().find(s => 
                                s.track && s.track.kind === 'video'
                            );
                            if (sender) {
                                sender.replaceTrack(track);
                            }
                        });
                    });
                    
                    // Restore local video display
                    localVideo.srcObject = localStream;
                    
                    // Reset UI
                    screenShare.classList.remove('btn-success');
                    screenShare.classList.add('btn-outline-light');
                    screenShare.innerHTML = '<i class="fa fa-desktop"></i>';
                    
                    // Reset menu
                    screenMenuItem.textContent = 'Share Screen';
                };
            } catch (error) {
                console.error('Error sharing screen:', error);
                alert('Could not share screen: ' + error.message);
            }
        }
        
        // Event listeners for control buttons - with null checks
        if (micToggle) {
            micToggle.addEventListener('click', toggleMicrophone);
        } else {
            console.warn('Microphone toggle button not found');
        }
        
        if (cameraToggle) {
            cameraToggle.addEventListener('click', toggleCamera);
        } else {
            console.warn('Camera toggle button not found');
        }
        
        if (screenShare) {
            screenShare.addEventListener('click', shareScreen);
        } else {
            console.warn('Screen share button not found');
        }
        
        // Event listeners for menu items - with null checks
        const toggleAudioBtn = document.getElementById('toggle-audio-menu');
        if (toggleAudioBtn) {
            toggleAudioBtn.addEventListener('click', function(e) {
                e.preventDefault();
                toggleMicrophone();
            });
        }
        
        const toggleVideoBtn = document.getElementById('toggle-video-menu');
        if (toggleVideoBtn) {
            toggleVideoBtn.addEventListener('click', function(e) {
                e.preventDefault();
                toggleCamera();
            });
        }
        
        const shareScreenBtn = document.getElementById('share-screen-menu');
        if (shareScreenBtn) {
            shareScreenBtn.addEventListener('click', function(e) {
                e.preventDefault();
                shareScreen();
            });
        }
        
        // Copy link button
        const copyLinkBtn = document.getElementById('copy-link');
        if (copyLinkBtn) {
            copyLinkBtn.addEventListener('click', function(e) {
                e.preventDefault();
                const roomUrl = window.location.origin + '/room/' + videoChatApp.roomSlug;
                navigator.clipboard.writeText(roomUrl).then(function() {
                    alert('Room link copied to clipboard!');
                });
            });
        }
        
        // Function to properly clean up and leave the room
        function leaveRoom() {
            // Show confirmation dialog
            if (confirm('Are you sure you want to leave this room?')) {
                console.log('Leaving room and cleaning up resources...');
                
                // Stop any ongoing screen sharing
                if (localVideo.srcObject !== localStream) {
                    localVideo.srcObject.getTracks().forEach(track => track.stop());
                }
                
                // Close all peer connections
                Object.values(peers).forEach(call => {
                    try {
                        call.close();
                    } catch (e) {
                        console.error('Error closing peer connection:', e);
                    }
                });
                
                // Close WebSocket connection
                if (ws && ws.readyState === WebSocket.OPEN) {
                    try {
                        ws.send(JSON.stringify({
                            type: 'leave',
                            userId: videoChatApp.currentUserId,
                            roomId: videoChatApp.roomId
                        }));
                        ws.close();
                    } catch (e) {
                        console.error('Error closing WebSocket:', e);
                    }
                }
                
                // Stop all tracks in local stream
                if (localStream) {
                    localStream.getTracks().forEach(track => {
                        try {
                            track.stop();
                            console.log(`Stopped ${track.kind} track`);
                        } catch (e) {
                            console.error(`Error stopping ${track.kind} track:`, e);
                        }
                    });
                }
                
                // Close PeerJS connection
                if (peer) {
                    try {
                        peer.destroy();
                    } catch (e) {
                        console.error('Error destroying peer:', e);
                    }
                }
                
                // Set a flag to prevent the beforeunload handler from showing a confirmation dialog
                window.isLeavingRoomIntentionally = true;
                
                // Notify server that we're leaving
                return fetch('/api/rooms/' + videoChatApp.roomId + '/leave', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    }
                })
                .then(() => {
                    console.log('Successfully left the room');
                    // Navigate back to home page
                    window.location.href = '/';
                })
                .catch(error => {
                    console.error('Error leaving room:', error);
                    // Navigate back to home page anyway
                    window.location.href = '/';
                });
            }
            return false;
        }
        
        // Add event listener for beforeunload to properly clean up resources
        window.addEventListener('beforeunload', function(e) {
            // Don't show confirmation if we're leaving intentionally
            if (window.isLeavingRoomIntentionally) return;
            
            // Stop tracks to release camera and microphone
            if (localStream) {
                localStream.getTracks().forEach(track => track.stop());
            }
            
            // Show confirmation dialog
            e.preventDefault();
            e.returnValue = 'Are you sure you want to leave the room?';
            return 'Are you sure you want to leave the room?';
        });
        
        // Leave room button - with null check
        const leaveRoomBtn = document.getElementById('leave-room');
        if (leaveRoomBtn) {
            leaveRoomBtn.addEventListener('click', function(e) {
                e.preventDefault();
                leaveRoom();
            });
        } else {
            console.warn('Leave room button not found');
        }
        
        // Set up floating menu functionality
        window.showRoomOptions = function(event) {
            event.preventDefault();
            const menu = document.getElementById('roomOptionsMenu');
            menu.classList.toggle('show');
            menu.style.display = menu.classList.contains('show') ? 'block' : 'none';
            
            // Position the menu relative to the button
            const button = event.currentTarget;
            const rect = button.getBoundingClientRect();
            menu.style.top = rect.bottom + 'px';
            menu.style.left = (rect.left - menu.offsetWidth + rect.width) + 'px';
            
            // Add click outside listener
            document.addEventListener('click', closeMenuOnClickOutside);
        };
        
        // Close menu when clicking outside
        function closeMenuOnClickOutside(event) {
            const menu = document.getElementById('roomOptionsMenu');
            const trigger = document.getElementById('roomOptionsTrigger').querySelector('button');
            
            if (!menu.contains(event.target) && event.target !== trigger) {
                menu.classList.remove('show');
                menu.style.display = 'none';
                document.removeEventListener('click', closeMenuOnClickOutside);
            }
        }
        
        // Expose functions for floating menu
        window.toggleCamera = toggleCamera;
        window.toggleMicrophone = toggleMicrophone;
        window.shareScreen = shareScreen;
        window.leaveRoom = leaveRoom;
        window.copyRoomLink = function(event) {
            event.preventDefault();
            const roomUrl = window.location.origin + '/room/' + videoChatApp.roomSlug;
            navigator.clipboard.writeText(roomUrl).then(function() {
                alert('Room link copied to clipboard!');
            });
            document.getElementById('roomOptionsMenu').classList.remove('show');
        };
    }
    
    // Mercure implementace byla zcela odstraněna
    // Nyní používáme WebSocket pro signalizaci
</script>
{% endblock %}

</div> {# End of data-turbo-permanent div #}
{% endblock %}